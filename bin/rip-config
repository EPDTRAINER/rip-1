#!/usr/bin/env ruby
# usage: rip-config
#
# Prints sh(1) code which can be used to activate rip for the shell.
#
# TODO: Right now it's actually bash code. I plan to convert it once I
#       get done reading dash(1).

RIPDIR = ENV['RIPDIR']
RIPENV = ENV['RIPENV'] || 'active'
push = ARGV.delete('--push')

def clean_env_path(name, subdir)
  if ENV[name] =~ /:?#{RIPDIR}\/(\w+)\/#{subdir}/ && $1 != RIPENV
    re = $&.sub(/#{RIPDIR}/, "$RIPDIR").gsub('/', '\/')
    "${#{name}/#{re}}"
  else
    "$#{name}"
  end
end

RUBYLIB = clean_env_path('RUBYLIB', 'lib')
PATH    = clean_env_path('PATH', 'bin')

if push
  require 'rip'
  ripenv = ARGV[0]
  abort "I need a ripenv." if ripenv.to_s.empty?
  abort "Can't find ripenv `#{ripenv}'" if !Rip.envs.include?(ripenv)
  puts <<-PUSH
export PATH="$PATH:$RIPDIR/#{ripenv}/bin";
export RUBYLIB="$RUBYLIB:$RIPDIR/#{ripenv}/lib";
PUSH
  exit
end

if ENV['RIPHELPERS'] != '0'
  puts <<-end_functions
  function rip-push() {
    eval `rip-config --push $1`;
  };
  function rip-pop() {
    PATH=$(echo $1 | ruby -e 'print ENV["PATH"].sub(/:\#{ENV["RIPDIR"]}\\/\#{STDIN.read.chomp}\\/bin/,"")');
    RUBYLIB=$(echo $1 | ruby -e 'print ENV["RUBYLIB"].sub(/:\#{ENV["RIPDIR"]}\\/\#{STDIN.read.chomp}\\/lib/,"")');
    export RUBYLIB PATH;
  };
  function rip-use {
    export RIPENV=$1;
    eval `rip-config`;
  };
  end_functions
end

puts "export RIPENV=#{RIPENV}" if RIPENV != 'active'

puts <<-end_shellcode
RIPVERBOSE=1
RIPDIR=${RIPDIR:-"$HOME/.rip"}
RUBYLIB="$RIPDIR/#{RIPENV}/lib:#{RUBYLIB}"
PATH="$RIPDIR/#{RIPENV}/bin:#{PATH}"
export RIPVERBOSE RIPDIR RUBYLIB PATH
end_shellcode
