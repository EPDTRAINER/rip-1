#!/usr/bin/env ruby
# Usage: rip-package-gem NAME VERSION

source  = ARGV[0]
version = ARGV[1]

unless source =~ /\.gem$/ || source =~ /^(\w|-)+$/
  exit 3 # Can't handle source
end

require 'rip/script'

def list(name)
  rpg_available? ? rpg_list(name) : gem_list(name)
end

def unpack(name, version)
  rpg_available? ? rpg_unpack(name, version) : gem_unpack(name, version)
end

def gem_list(name)
  gems = gem("list #{name} --remote").split("\n")
  if gems.detect { |f| f =~ /^#{name} \((.+)\)/ }
    $1
  end
end

def gem_unpack(name, version)
  path = nil

  cd Rip.cache do
    gem_path = File.expand_path("#{name}-#{version}.gem")

    begin
      gem "fetch", name, "-v #{version}"

      unless File.exist?(gem_path)
        abort "#{name} #{version} not found"
      end

      sh("gem unpack '#{gem_path}' --target='#{Rip.packages}'") =~
        /^Unpacked gem: '(.+)'$/
      path = $1
    ensure
      rm_rf gem_path
    end
  end

  if path.nil?
    abort "#{name} #{version} not found"
  end

  path
end

def rpg_list(name)
  if rpg("list -a #{name}") =~ /^#{name} (.+)$/
    $1
  end
end

def rpg_unpack(name, version)
  if path = rpg("unpack #{name} #{version}")
    path.chomp
  end
end

version ||= list(source)

package_path = "#{Rip.packages}/#{source}-#{Rip.md5("#{source}#{version}")}"

synchronize(package_path) do
  if File.directory?(package_path)
    puts package_path
    exit 0
  end

  cd Rip.packages

  path = unpack(source, version)

  if !File.exist?(path)
    abort "#{source} #{version} not found"
  end

  mv path, package_path

  File.open("#{package_path}/metadata.rip", 'w') do |f|
    f.puts "#{source} #{version}"
  end

  puts package_path
end
