#!/usr/bin/env ruby
# Usage: rip-package-gem NAME VERSION

source  = ARGV[0]
version = ARGV[1]

unless source =~ /\.gem$/ || source =~ /^(\w|-)+$/
  exit 123 # Need to research bash exit code conventions
end

require 'rip/script'

def gem_list(name)
  gems = gem("list #{name} --remote").split("\n")
  if gems.detect { |f| f =~ /^#{name} \((.+)\)/ }
    $1
  end
end

def gem_fetch(name, version)
  path = "#{Rip.cache}/#{name}-#{version}.gem"

  synchronize(path) do
    unless File.file?(path)
      cd Rip.cache do
        gem "fetch", name, "-v #{version}"

        unless File.exist?(path)
          abort "#{name} #{version} not found"
        end
      end
    end
  end

  path
end

def gem_unpack(name, version)
  gem_path = gem_fetch(name, version)

  path = sh("gem unpack '#{gem_path}' --target='#{Rip.packages}'") =~
    /^Unpacked gem: '(.+)'$/

  if path.nil?
    abort "#{name} #{version} not found"
  end

  $1
end

def rpg_list(name)
  if rpg("list -a #{name}") =~ /^#{name} (.+)$/
    $1
  end
end

def rpg_unpack(name, version)
  if path = rpg("unpack #{name} #{version}")
    path.chomp
  end
end

version ||= rpg_available? ? rpg_list(source) : gem_list(source)

package_path = "#{Rip.packages}/#{source}-#{Rip.md5("#{source}#{version}")}"

synchronize(package_path) do
  if File.directory?(package_path)
    puts package_path
    exit 0
  end

  cd Rip.packages

  path = rpg_available? ? rpg_unpack(source, version) : gem_unpack(source, version)

  if !File.exist?(path)
    abort "#{source} #{version} not found"
  end

  mv path, package_path

  File.open("#{package_path}/metadata.rip", 'w') do |f|
    f.puts "#{source} #{version}"
  end

  puts package_path
end
