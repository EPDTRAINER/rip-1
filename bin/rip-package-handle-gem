#!/usr/bin/env ruby
# Usage: rip-package-handle-gem NAME VERSION

require 'rip/script'

source, path, version = Rip::Package.parse_args(ARGV)

# Only handle root packages
exit 3 if path != '/'

unless source =~ /\.gem$/ || source =~ /^(\w|-)+$/
  exit 3 # Can't handle source
end

def find_gem(source, version)
  return @spec, @source_uri if @spec

  require 'rubygems'
  Gem.configuration.verbose = false

  if ENV['GEM_SERVER']
    Gem.sources = [ENV['GEM_SERVER']]
  end

  require 'rubygems/dependency_installer'
  @spec, @source_uri = Gem::DependencyInstaller.new.find_spec_by_name_and_version(source, version).first
rescue Gem::GemNotFoundException => e
  name = version ? "#{source} #{version}" : source
  abort "#{name} not found"
end

if !version || version !~ /^(\d|.)+$/
  spec, source_uri = find_gem(source, version)
  source, version = spec.name, spec.version.to_s
end

version = Rip::Requirement.new(version).to_s
package_path = "#{Rip.packages}/#{source}-#{Rip.md5("#{source}#{version}")}"

synchronize(package_path) do
  if File.directory?(package_path)
    puts package_path
    exit 0
  end

  spec, source_uri = find_gem(source, version)

  at_exit do
    if !exited_successfully?
      debug "cleaning up #{package_path}"
      rm_rf package_path
    end
  end

  cd Rip.packages

  info "fetching #{spec.name} #{spec.version}"
  gem_path = Gem::RemoteFetcher.fetcher.download(spec, source_uri)
  Gem::Installer.new(gem_path, :unpack => true).unpack(package_path)

  if !File.exist?(package_path)
    abort "#{source} #{version} not found"
  end

  write("#{package_path}/metadata.rip") { "#{spec.name} #{spec.version}" }

  if !File.exists?(deps_rip = "#{package_path}/deps.rip")
    deps = spec.runtime_dependencies.map do |dep|
      requirement = Rip::Requirement.new(*dep.requirement.as_list)
      if requirement.any?
        "#{dep.name} #{requirement}"
      else
        "#{dep.name}"
      end
    end

    if deps.any?
      write(deps_rip) { deps.sort }
    end
  end

  puts package_path
end
