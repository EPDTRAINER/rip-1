rip(5) -- rip file format
=========================

## SYNOPSIS

A simple Rip file (e.g. deps.rip):

    git://github.com/ezmobius/redis-rb.git eed200ad
    git://github.com/brianmario/yajl-ruby.git 0.6.3
    rack
    sinatra
    mustache

A more complex Rip file:

    git://github.com/ezmobius/redis-rb.git @1.0 =>redis
    git://github.com/brianmario/yajl-ruby.git 0.6.3
    sinatra 0.9.4
    * rack 1.0
    rake # any version
    !brew install mongodb
    # Classier with caps
    git://github.com/quirkey/vegas.git v0.1.2 =>Vegas
    logging.rip
    git://github.com/rails/rails.git /activerecord

Each Rip file describes a set of Rip packages, one package per line.

## DESCRIPTION

A basic Rip package can be described in terms of its source and
relevant install-time instructions.

The format is:

    source [install options]

Each line of a Rip file can be fed to `rip-install`.

### Comments

Rip files use Ruby-style `#` comments. Anything after a `#` on a line
is considered a comment.

    # comment
    redis # also a comment

### Source

Always the first item in the line, the source describes where the
package can be found. A source can be any of the following things:

* git repository
* hg repository
* bzr repository
* tarball
* zip
* `.rip` file
* shell command
* local directory
* local file
* remote file (http)

More details on each under `SOURCES`.

### Version

The version is any argument which starts with [a-z0-9]. Some examples:

* master
* 0.6.3
* v0.1.2
* eed200ad

See `Fake Version` below to learn how to lie about the package
version.

### Path

A path is an argument which begins with a slash. Paths tells Rip which
subdirectory to use as the base directory when installing the target
package. For example, given this line:

    git://github.com/rails/rails.git /activerecord

Rip would fetch and unpack `git://github.com/rails/rails.git` but use
`activerecord` as the root when installing.

### Dependency

A dependency can be specified using a star. It will be installed
before the package which depends on it.

For example, these lines:

    sinatra 0.9.4
    * rack 1.0

Will basically be executed as:

    $ rip-install rack 1.0
    $ rip-install sinatra 0.9.4

Dependencies can be nested as deeply as you'd like.

    sinatra 0.9.4
    * rack 1.0
    mustache 0.3.1
    * temple 1.2
    ** hot-parser 0.4.5
    ** cacher 0.1
    *** httparty 1.0 /party
    * markdown 1.0
    ** rdiscount 0.9.4.1

### Name

Rip derives a package's name from its source, but it may be helpful to
specify your own name.

A name is an argument which begins with an equal sign followed by a
greater than sign.

    git://github.com/ezmobius/redis-rb.git =>redis

This line says we want the installed package to be named "redis". Note
now that installing the gem "redis" will fail due to a name conflict.

This also means gems depending on the "redis" gem will see your
git-based package as that depenedency, and may fail to install because
the versions differ.

If that's the case you can specify a fake version.

### Fake Versions

Fake verisions register a package as being installed at a different
version than it's actually installed at.

For example:

    git://github.com/defunkt/mustache.git @1.0.2

This says mustache is installed at version 1.0.2, but really it'll
install the latest version from the git repo's `master` branch.

This can be useful in development or when combined with the `name`
argument:

    git://github.com/ezmobius/redis-rb.git @1.0 =>redis

This makes it appear as though we have version 1.0 of the redis gem
installed.

## SOURCES

Thanks to pip(1) for the inspiration.

### git repository

Rip will use git to fetch a package if its source is in one of the
following formats:

    git://git.myproject.org/MyProject
    git@git.myproject.org:MyProject.git
    git+http://git.myproject.org/MyProject
    git+ssh://git@myproject.org/MyProject

Rip will also try to fetch any source ending in `.git`:

    http://git.myproject.org/MyProject.git
    file:///Users/chris/Projects/rip/.git

### hg repository

Rip will use hg to fetch a package if its source is in one of the
following formats:

    hg+http://hg.myproject.org/MyProject/
    hg+https://hg.myproject.org/MyProject/
    hg+ssh://hg@myproject.org/MyProject/

### bzr repository

Rip will use bzr to fetch a package if its source is in one of the
following formats:

    bzr+http://bzr.myproject.org/MyProject/trunk/ /MyProject
    bzr+sftp://user@myproject.org/MyProject/trunk/ /MyProject
    bzr+ssh://user@myproject.org/MyProject/trunk/ /MyProject
    bzr+ftp://user@myproject.org/MyProject/trunk/ /MyProject

### `.rip` file

Any source ending in `.rip` will be loaded recursively. That is, each
line will be fed to `rip-install` as if they were a top level
line. Kind of like a partial or include.

    deps.rip
    http://defunkt.github.com/hub/latest.rip

Keep in mind these also work as argument to `rip-install`:

    $ rip-install http://defunkt.github.com/hub/latest.rip

### shell command

Rip can run shell commands, it's true. Shell commands are special and
take up the entire line - everything will be run right on the shell.

    !brew install redis
    !brew install mongo
    !brew install ruby
    redis 1.0
    mongo

### zip

Anything ending in `.zip` will be fetched and unzipped, be it remote
or local.

    http://defunkt.github.com/backups/redis-rb.zip

### tarball

Anything ending in `.tar`, `.tar.gz`, or `.tgz. will be fetched and
dezipped, be it remote or local.

    http://defunkt.github.com/backups/redis.tar.gz

### local directory

Directories can be specified as long as they begin with `/` or `~`.

    /var/packages/iphone
    ~/Projects/stunners @1.0

### file

Files can be specified as long as they begin with `/` or `~`.

    /var/packages/iphone/iphone.rb
    ~/Projects/stunners/index.rb

## BUGS

<http://github.com/defunkt/rip/issues>

## AUTHOR

Chris Wanstrath :: chris@ozmm.org

## SEE ALSO

rip(1), git(1),
<http://github.com>,
<http://github.com/defunkt/rip>
